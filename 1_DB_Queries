CREATE TABLE Item (
    itemID INT AUTO_INCREMENT PRIMARY KEY,
    itemName VARCHAR(255) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    category VARCHAR(255) NOT NULL
);

-- Table to store inventory items
CREATE TABLE InventoryItem (
    inventoryItemID INT AUTO_INCREMENT PRIMARY KEY, -- Unique ID for each inventory item
    itemID INT NOT NULL,                            -- Foreign key referencing Item
    stockLevel INT NOT NULL,
    FOREIGN KEY (itemID) REFERENCES Item(itemID) ON DELETE CASCADE
);

-- Table to store inventory (a collection of inventory items)
CREATE TABLE Inventory (
    inventoryID INT AUTO_INCREMENT PRIMARY KEY
);

-- Table to link inventory and inventory items (many-to-many relationship)
CREATE TABLE Inventory_InventoryItem (
    inventoryID INT NOT NULL,
    inventoryItemID INT NOT NULL,
    PRIMARY KEY (inventoryID, inventoryItemID),
    FOREIGN KEY (inventoryID) REFERENCES Inventory(inventoryID) ON DELETE CASCADE,
    FOREIGN KEY (inventoryItemID) REFERENCES InventoryItem(inventoryItemID) ON DELETE CASCADE
);

-- New table for rider
CREATE TABLE Rider (
    id INT AUTO_INCREMENT PRIMARY KEY, 
    vehicle VARCHAR(255),              
    accountName VARCHAR(255) UNIQUE,   
    FOREIGN KEY (accountName) REFERENCES Account(name) ON DELETE CASCADE
);


-- previous version by hashir
-- Table to store shops
CREATE TABLE Shop (
    shopID INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    location VARCHAR(255) NOT NULL,
    inventoryID INT NOT NULL,                      -- Foreign key referencing Inventory
    FOREIGN KEY (inventoryID) REFERENCES Inventory(inventoryID) ON DELETE CASCADE
);

-- updated version by abbas
CREATE TABLE Shop (
    shopID INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    location VARCHAR(255) NOT NULL,
    inventoryID INT NOT NULL,                      -- Foreign key referencing Inventory
    accountName VARCHAR(255) UNIQUE,
    status VARCHAR(230),
    FOREIGN KEY (inventoryID) REFERENCES Inventory(inventoryID) ON DELETE CASCADE,
	FOREIGN KEY (accountName) REFERENCES Account(name) ON DELETE CASCADE
);

-- Update for shop table, added a status column to help with approve and unapprove process
alter table shop add column status varchar(230);



------- Tables made by Abbas ------


CREATE TABLE Account (
    name VARCHAR(255) PRIMARY KEY,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    phoneNumber VARCHAR(15) 
);

-- Edit to add "type" column
ALTER TABLE Account
ADD COLUMN type VARCHAR(255) DEFAULT 'user';



CREATE TABLE Admin (
    id INT PRIMARY KEY AUTO_INCREMENT,
    account_name VARCHAR(255) NOT NULL, 
    FOREIGN KEY (account_name) REFERENCES Account(name)
);

CREATE TABLE User (
    ID INT PRIMARY KEY AUTO_INCREMENT,     
    preferences TEXT,                       
    budget INT,                    
    location VARCHAR(255),                 
    familySize INT,            
    accountName VARCHAR(255) UNIQUE,       
    FOREIGN KEY (accountName) REFERENCES Account(name)
);

CREATE TABLE Feedback (
    feedbackID INT PRIMARY KEY AUTO_INCREMENT,     
    userID INT NOT NULL,                          
    userComments TEXT,                             
    adminComments TEXT,                            
    type VARCHAR(255),                            
    status VARCHAR(50),                            
    priority VARCHAR(50),
    FOREIGN KEY (userID) REFERENCES User(ID)     
);

CREATE TABLE ShopKeeper (
    ID INT PRIMARY KEY AUTO_INCREMENT,  
    shopActive VARCHAR(50) NOT NULL         
);

CREATE TABLE SaleLineItem (
    itemID INT,
    quantity INT NOT NULL,
    shopID INT NOT NULL,
    PRIMARY KEY (itemID, shopID),
    FOREIGN KEY (itemID) REFERENCES Item(itemID),
    FOREIGN KEY (shopID) REFERENCES Shop(shopID)
);

CREATE TABLE OptimalList (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT,
    date DATE NOT NULL,
    totalCost DECIMAL(10, 2) NOT NULL
);

CREATE TABLE OptimalListCategories (
    category VARCHAR(100) PRIMARY KEY
);

CREATE TABLE OptimalListPercentages (
    optimalListID INT,
    category VARCHAR(100),
    percentage INT NOT NULL,
    PRIMARY KEY (optimalListID, category),
    FOREIGN KEY (optimalListID) REFERENCES OptimalList(ID)
);

CREATE TABLE OptimalSaleLineItem (
    optimalListID INT,
    itemID INT,
    quantity INT NOT NULL,
    shopID INT NOT NULL,
    PRIMARY KEY (optimalListID, itemID, shopID),
    FOREIGN KEY (optimalListID) REFERENCES OptimalList(ID),
    FOREIGN KEY (itemID) REFERENCES Item(itemID),
    FOREIGN KEY (shopID) REFERENCES Shop(shopID)
);

CREATE TABLE SharedList (
    senderID INT,
    receiverID INT,
    PRIMARY KEY (senderID, receiverID),
    FOREIGN KEY (senderID) REFERENCES User(ID),
    FOREIGN KEY (receiverID) REFERENCES User(ID)
);

CREATE TABLE SharedSaleLineItem (
    sharedListSenderID INT,
    sharedListReceiverID INT,
    itemID INT,
    quantity INT NOT NULL,
    shopID INT NOT NULL,
    PRIMARY KEY (sharedListSenderID, sharedListReceiverID),
    FOREIGN KEY (sharedListSenderID, sharedListReceiverID) REFERENCES SharedList(senderID, receiverID),
    FOREIGN KEY (itemID) REFERENCES Item(itemID),
    FOREIGN KEY (shopID) REFERENCES Shop(shopID)
);

CREATE TABLE CustomList (
    customListID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    FOREIGN KEY (userID) REFERENCES User(ID)
);

CREATE TABLE CustomListSaleLineItem (
    customListID INT,
    itemID INT,
    quantity INT NOT NULL,
    shopID INT NOT NULL,
    PRIMARY KEY (customListID, itemID, shopID),
    FOREIGN KEY (customListID) REFERENCES CustomList(customListID),
    FOREIGN KEY (itemID) REFERENCES Item(itemID),
    FOREIGN KEY (shopID) REFERENCES Shop(shopID)
);

CREATE TABLE OrderTable (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    userID INT NOT NULL,
    customListID INT,
    amount DOUBLE,
    status VARCHAR(255),
    time VARCHAR(255),
    address VARCHAR(255),
    date DATE,
    phoneNumber VARCHAR(15),
    FOREIGN KEY (userID) REFERENCES User(ID),
    FOREIGN KEY (customListID) REFERENCES CustomList(customListID)
);
CREATE TABLE OrderCodes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    orderID INT NOT NULL,
    orderCode VARCHAR(10) NOT NULL UNIQUE,
    FOREIGN KEY (orderID) REFERENCES OrderTable(ID)
);

CREATE TABLE RiderOrder (
  id INT AUTO_INCREMENT PRIMARY KEY,
  riderID INT,
  orderID INT,
  FOREIGN KEY (riderID) REFERENCES Rider(id),
  FOREIGN KEY (orderID) REFERENCES OrderTable(ID)
);


